



T2TRG Research Group                                          J. Jimenez
Internet-Draft                                                  Ericsson
Intended status: Informational                         November 22, 2019
Expires: May 25, 2020


                     Using MUD on CoAP environments
                     draft-jimenez-mud-coap-latest

Abstract

   This document provides some suggestions to add Manufacturing Usage
   Descriptions (MUD) to CoAP environments.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on May 25, 2020.

Copyright Notice

   Copyright (c) 2019 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.






Jimenez                   Expires May 25, 2020                  [Page 1]

Internet-Draft                MUD and CoAP                 November 2019


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Requirements Language . . . . . . . . . . . . . . . . . .   2
   2.  MUD Architecture  . . . . . . . . . . . . . . . . . . . . . .   2
     2.1.  Problems  . . . . . . . . . . . . . . . . . . . . . . . .   4
   3.  MUD on CoAP . . . . . . . . . . . . . . . . . . . . . . . . .   4
     3.1.  Basic Operation . . . . . . . . . . . . . . . . . . . . .   5
     3.2.  CoAP Operations . . . . . . . . . . . . . . . . . . . . .   5
       3.2.1.  Discovery . . . . . . . . . . . . . . . . . . . . . .   6
   4.  MUD File  . . . . . . . . . . . . . . . . . . . . . . . . . .   8
     4.1.  Serialization . . . . . . . . . . . . . . . . . . . . . .   8
   5.  Security Considerations . . . . . . . . . . . . . . . . . . .   8
   6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   8
   7.  References  . . . . . . . . . . . . . . . . . . . . . . . . .   8
     7.1.  Normative References  . . . . . . . . . . . . . . . . . .   8
     7.2.  Informative References  . . . . . . . . . . . . . . . . .   9
   Acknowledgments . . . . . . . . . . . . . . . . . . . . . . . . .   9
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  10

1.  Introduction

   Manufacturer Usage Description (MUD) have been specified on
   [RFC8520].  As the RFC states, the goal of MUD is to provide a means
   for end devices to signal to the network what sort of access and
   network functionality they require to properly function.

   While [RFC8520] contemplates the use of CoAP [RFC7252] in the form of
   CoAP URLs it does not explain how MUDs can be used in a CoAP network.
   Moreover, in CoAP we can host the MUD file on the CoAP endpoint
   itself, instead of hosting it on a dedicated MUD File Server.
   Schemes that rely on connectivity to bootstrap the network might be
   flaky if that connectivity is not present.  This however, may
   introduce new security and networking challenges.

1.1.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

2.  MUD Architecture

   MUDs are defined in [RFC8520] and are composed of:

   o  A URL that can be used to locate a description;



Jimenez                   Expires May 25, 2020                  [Page 2]

Internet-Draft                MUD and CoAP                 November 2019


   o  The description itself, including how it is interpreted; and

   o  a means for local network management systems to retrieve the
      description

   o  from a MUD File Server.

   Their purpose is to provide a means for end devices to signal the
   network what sort of access and network functionality they require to
   properly function.  In a MUD scenario, the end device is a "Thing"
   that exposes a "MUD URL" to the network.  Routers or Switches in the
   path that speak MUD can forward the URL to "MUD Managers" that query
   a "MUD file server" and retrieve the "MUD File" from it.  After
   processing, the "MUD Manager" applies an access policy to the IoT
   Thing.

  .......................................                      +-------+
  .                      ____________   .                      |  MUD  |
  .                     +            +  .          +-----------+-+File |
  .                     |    MUD     +-->get URL+->+    MUD      +-----+
  .                     |  Manager   |  .(https)   | File Server |
  .  End system network +____________+<+MUD file<-<+-------------+
  .                             .       .
  .                             .       .
  . _______                 _________   .
  .+       + (DHCP et al.) + router  +  .
  .| Thing +---->MUD URL+->+   or    |  .
  .+_______+               | switch  |  .
  .                        +_________+  .
  .......................................


                    Figure 1: Current MUD Architecture

   MUDs can be used to automatically permit the device to send and
   receive only the traffic it requires to perform its intended
   function.  MUDs can also be used to paliate DDOS attacks, for example
   by prohibiting unauthorized traffic to and from IoT devices.  Even if
   an IoT device becomes compromised, MUD prevents it from being used in
   any attack that would require the device to send traffic to an
   unauthorized destination.

   Overall a MUD is emitted as a URL using DHCP, LLDP or through 802.1X,
   then a Switch or Router will send the URI to some IoT Controlling
   Entity.  That Entity will fetch the MUD file from a Server on the
   Internet over HTTP [RFC8576].





Jimenez                   Expires May 25, 2020                  [Page 3]

Internet-Draft                MUD and CoAP                 November 2019


2.1.  Problems

   The biggest issue with this architecture is that if the MUD File
   server is not available at a given time, no Thing can actually join
   the network.  Relying on a single server is generally not a good
   idea.

   Another potential issue is that MUD files seem to be oriented to
   classes of devices and not specific device instances.  It could be
   that during bootstrapping or provisioning different devices of the
   same class have different properties and thus different MUD files,
   more granularity would be preferable.

   This brings us to the third problem, which is that the MUD file is
   somewhat static on a web server and out of the usual interaction
   patterns towards a device.  In CoAP it seems that properties
   intrinsic to a device (e.g. sensing information) or configuration
   information (e.g. lwm2m objects used for management) are hosted by
   the device too, even if they could be replicated by a cloud server.

3.  MUD on CoAP

   [RFC8520] does not prevent the Thing from using CoAP on the MUD URL.
   In this document we modify slightly the architecture.  The components
   are:

   o  A URL using the "coaps://" scheme that can be used to locate a
      description;

   o  The description itself, including how it is interpreted, which is
      now hosted on the thing under the path "/.well-known/core" and

   o  a means for local network management systems to retrieve the mud
      description

   o  which is hosted by the Thing itself acting as CoAP MUD File
      Server.














Jimenez                   Expires May 25, 2020                  [Page 4]

Internet-Draft                MUD and CoAP                 November 2019


            ...................................................
            .                                  ____________   .
            .                                 +            +  .
            .             +-----------------> |    MUD     |  .
            .   get URL   |                   |  Manager   |  .
            .   (coaps)   |                   +____________+  .
            .  MUD file   |                         .         .
            .             |                         .         .
            .             |     End system network  .         .
            .             |                         .         .
            .           __v____                 _________     .
            .          +       + (DHCP et al.) + router  +    .
            .     +--- | Thing +---->MUD URL+->+   or    |    .
            .     |MUD +_______+               | switch  |    .
            .     |File  |                     +_________+    .
            .     +------+                                    .
            ...................................................

                  Figure 2: Self-hosted MUD Architecture

3.1.  Basic Operation

   The operations are similar as specified on [RFC8520]:

   1.  The device performs first DHCPv4/v6 and gets an IP address.  The
       network can provide a temporary address before MUD validation
       starts.

   2.  The device may then emit a subsequent DHCPREQUEST using the
       DHCPv4/v6 option, including the CoAP MUD URL (e.g.
       "coaps://[2001:db8:3::123]/mud/light-class.senml") indicating
       that it is of the class type of "light".

   3.  The router (DHCP server) may implement the MUD functionality and
       will send the information to the MUD manager, which MAY be
       located on the same subnet.

   4.  The MUD manager will then get the MUD file from the Thing "/mud"
       resource.

   The use of CoAP does not change how [RFC8520] uses MUDs.

3.2.  CoAP Operations

   Things can expose MUDs as any other resource.  MUD Managers can send
   a GET request to a CoAP server for "/.well-known/core" and get in
   return a list of hypermedia links to other resources hosted in that




Jimenez                   Expires May 25, 2020                  [Page 5]

Internet-Draft                MUD and CoAP                 November 2019


   server.  Among those, it will get the path to the MUD file, for
   example "/mud" and Resource Types like "rt=mud".

3.2.1.  Discovery

3.2.1.1.  Resource Directory

   By using [I-D.ietf-core-resource-directory], devices can register a
   MUD file on the Resource Directory and use it as a MUD repository
   too.  Making it discoverable with the usual RD Lookup steps.

   Lookup will use the resource type rt=mud, the example in Link-Format
   [RFC6690] is:

   REQ: GET coap://rd.jaime.win/rd-lookup/res?rt=mud

   The RD will return a list of links that host the mud resource.

   RES: 2.05 Content

        <coap://[2001:db8:3::101]/box>;rt="mud";
          anchor="coap://[2001:db8:3::101]"
        <coap://[2001:db8:3::102]/switch>;rt="mud";
          anchor="coap://[2001:db8:3::102]",
        <coap://[2001:db8:3::102]/lock>;rt="mud";
          anchor="coap://[2001:db8:3::102]",
        <coap://[2001:db8:3::104]/light>;rt="mud";
          anchor="coap://[2001:db8:3::104]"

   The same examples in CoRAL [I-D.ietf-core-coral] and
   [I-D.hartke-t2trg-coral-reef] are:

   REQ: GET coap://rd.jaime.win/rd-lookup/res?rt=mud
        Accept: TBD123456 (application/coral+cbor@identity)

   The RD will return a list of links that host the mud resource.

   RES: 2.05 Content
        Content-Format: TBD123456 (application/coral+cbor@identity)

        rd-item <coap://[2001:db8:3::101]/box> { rt "mud" }
        rd-item <coap://[2001:db8:3::102]/switch> { rt "mud" }
        rd-item <coap://[2001:db8:3::102]/lock> { rt "mud" }
        rd-item <coap://[2001:db8:3::103]/light> { rt "mud" }







Jimenez                   Expires May 25, 2020                  [Page 6]

Internet-Draft                MUD and CoAP                 November 2019


3.2.1.2.  Multicast

   [RFC7252] registers one IPv4 and one IPv6 address each for the
   purpose of CoAP multicast.  All CoAP Nodes can be addressed at
   "224.0.1.187" and at "FF0X::FD".  Multicast could also be used to
   discover all Manufacturer descriptions in a subnet.

   The example in Link-Format [RFC6690] is:

   GET coap://[FF0X::FE]/.well-known/core?rt=mud

   The same examples in CoRAL [I-D.ietf-core-coral] and
   [I-D.hartke-t2trg-coral-reef] are: The same examples in CoRAL
   [I-D.ietf-core-coral] and [I-D.hartke-t2trg-coral-reef] are:

   REQ: GET coap://[FF0X::FE]/.well-known/core?rt=mud
        Accept: TBD123456 (application/coral+cbor@identity)

3.2.1.3.  Direct MUD discovery

   Using [RFC6690] using CoRE Link Format, a CoAP endpoint could attempt
   to configure itself based on another Thing's MUD.  For that reason it
   might fetch directly the MUD file from the device.  It would start by
   finding if the endpoint has a MUD.  The example in Link-Format
   [RFC6690] is:

   REQ: GET coap://[2001:db8:3::123]:5683/.well-known/core?rt=mud
   RES: 2.05 Content

        </mud/lightmud>;rt="mud"

   In CoRAL [I-D.ietf-core-coral] and [I-D.hartke-t2trg-coral-reef]:

   REQ: GET coap://[2001:db8:3::123]:5683/.well-known/core?rt=mud
        Accept: TBD123456 (application/coral+cbor@identity)

   RES: 2.05 Content
        Content-Format: TBD123456 (application/coral+cbor@identity)

        rd-item </mud/lightmud.mud> { rt "mud" }

   Once the client knows that there is a MUD file under "/mud/lightmud",
   it can decide to follow the presented links and query it.

   REQ: GET coap://[2001:db8:3::123]:5683/mud/lightmud
   RES: 2.05 Content

        [{MUD Payload in SENML}]



Jimenez                   Expires May 25, 2020                  [Page 7]

Internet-Draft                MUD and CoAP                 November 2019


   In CoRAL [I-D.ietf-core-coral] and [I-D.hartke-t2trg-coral-reef]:

   REQ: GET coap://[2001:db8:3::123]:5683/mud/lightmud

   RES: 2.05 Content

        [{MUD Payload in SENML}]

   The device may also observe the MUD resource using [RFC7641],
   directly subscribing to future network configuration changes.

4.  MUD File

   TBD behaviors that are specific of CoAP should be here.

4.1.  Serialization

   TBD write about SenML/CBOR MUDs.

5.  Security Considerations

   Things will expose a MUD file that MUST be signed both by the MUD
   author and by the device operator.  Security Considerations present
   on Section 4.1 of [RFC8576].

   TBD: We might want to use BRSKI or another similar mechanism.
   Optionally the device could advertise localhost on the URL with the
   path to the MUD.  When the network has the IP it'd append the path to
   it in order to fetch the MUD.

6.  IANA Considerations

   None

7.  References

7.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.





Jimenez                   Expires May 25, 2020                  [Page 8]

Internet-Draft                MUD and CoAP                 November 2019


7.2.  Informative References

   [I-D.hartke-t2trg-coral-reef]
              Hartke, K., "Resource Discovery in Constrained RESTful
              Environments (CoRE) using the Constrained RESTful
              Application Language (CoRAL)", draft-hartke-t2trg-coral-
              reef-02 (work in progress), July 2019.

   [I-D.ietf-core-coral]
              Hartke, K., "The Constrained RESTful Application Language
              (CoRAL)", draft-ietf-core-coral-00 (work in progress),
              August 2019.

   [I-D.ietf-core-resource-directory]
              Shelby, Z., Koster, M., Bormann, C., Stok, P., and C.
              Amsuess, "CoRE Resource Directory", draft-ietf-core-
              resource-directory-23 (work in progress), July 2019.

   [RFC6690]  Shelby, Z., "Constrained RESTful Environments (CoRE) Link
              Format", RFC 6690, DOI 10.17487/RFC6690, August 2012,
              <https://www.rfc-editor.org/info/rfc6690>.

   [RFC7252]  Shelby, Z., Hartke, K., and C. Bormann, "The Constrained
              Application Protocol (CoAP)", RFC 7252,
              DOI 10.17487/RFC7252, June 2014,
              <https://www.rfc-editor.org/info/rfc7252>.

   [RFC7641]  Hartke, K., "Observing Resources in the Constrained
              Application Protocol (CoAP)", RFC 7641,
              DOI 10.17487/RFC7641, September 2015,
              <https://www.rfc-editor.org/info/rfc7641>.

   [RFC8520]  Lear, E., Droms, R., and D. Romascanu, "Manufacturer Usage
              Description Specification", RFC 8520,
              DOI 10.17487/RFC8520, March 2019,
              <https://www.rfc-editor.org/info/rfc8520>.

   [RFC8576]  Garcia-Morchon, O., Kumar, S., and M. Sethi, "Internet of
              Things (IoT) Security: State of the Art and Challenges",
              RFC 8576, DOI 10.17487/RFC8576, April 2019,
              <https://www.rfc-editor.org/info/rfc8576>.

Acknowledgments

   Thanks to Klaus Hartke for the CoRAL examples and discussions as well
   as Michael Richardson for discussions on the problem space.





Jimenez                   Expires May 25, 2020                  [Page 9]

Internet-Draft                MUD and CoAP                 November 2019


Author's Address

   Jaime Jimenez
   Ericsson

   Phone: +358-442-992-827
   Email: jaime@iki.fi












































Jimenez                   Expires May 25, 2020                 [Page 10]
